// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ServeVideoVideoFilePathGetData, ServeVideoVideoFilePathGetResponse, ServeImagesImagesFilePathGetData, ServeImagesImagesFilePathGetResponse, ServeFrontendPathGetData, ServeFrontendPathGetResponse, RequestApiV1ForgotPasswordPostData, RequestApiV1ForgotPasswordPostResponse, VerifyApiV1ForgotPasswordVerifyPostData, VerifyApiV1ForgotPasswordVerifyPostResponse, CheckApiV1HealthGetResponse, SetupApiV1TwoFaSetupGetResponse, VerifyApiV1TwoFaVerifyPostData, VerifyApiV1TwoFaVerifyPostResponse, VerifyCodeApiV1TwoFaVerifyCodePostData, VerifyCodeApiV1TwoFaVerifyCodePostResponse, DisableApiV1TwoFaDisablePostResponse, SignupApiV1UserSignupPostData, SignupApiV1UserSignupPostResponse, ResendVerificationApiV1UserResendVerificationPostResponse, VerifySignupApiV1UserVerifySignupPostData, VerifySignupApiV1UserVerifySignupPostResponse, LoginApiV1UserLoginPostData, LoginApiV1UserLoginPostResponse, GetMeApiV1UserMeGetResponse, UpdateApiV1UserPutData, UpdateApiV1UserPutResponse, DeleteApiV1UserDeleteResponse, ChangePasswordApiV1UserChangePasswordPostData, ChangePasswordApiV1UserChangePasswordPostResponse } from './types.gen';

export class DefaultService {
    /**
     * Serve Video
     * Serve video files from out/video directory.
     * @param data The data for the request.
     * @param data.filePath
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static serveVideoVideoFilePathGet(data: ServeVideoVideoFilePathGetData): CancelablePromise<ServeVideoVideoFilePathGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/video/{file_path}',
            path: {
                file_path: data.filePath
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Serve Images
     * Serve image files from out/images directory.
     * @param data The data for the request.
     * @param data.filePath
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static serveImagesImagesFilePathGet(data: ServeImagesImagesFilePathGetData): CancelablePromise<ServeImagesImagesFilePathGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/images/{file_path}',
            path: {
                file_path: data.filePath
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Serve Frontend
     * Serve the frontend application with security and proper error handling.
     * @param data The data for the request.
     * @param data.path
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static serveFrontendPathGet(data: ServeFrontendPathGetData): CancelablePromise<ServeFrontendPathGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/{path}',
            path: {
                path: data.path
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ForgotPasswordService {
    /**
     * Request
     * Request a password reset and send reset email to user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static requestApiV1ForgotPasswordPost(data: RequestApiV1ForgotPasswordPostData): CancelablePromise<RequestApiV1ForgotPasswordPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/forgot-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Verify
     * Verify password reset token and update user's password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static verifyApiV1ForgotPasswordVerifyPost(data: VerifyApiV1ForgotPasswordVerifyPostData): CancelablePromise<VerifyApiV1ForgotPasswordVerifyPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/forgot-password/verify',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class HealthService {
    /**
     * Check
     * Comprehensive health check endpoint with detailed system information.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static checkApiV1HealthGet(): CancelablePromise<CheckApiV1HealthGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/health'
        });
    }
    
}

export class TwoFaService {
    /**
     * Setup
     * Get QR code URL for 2FA setup.
     * @returns URL Successful Response
     * @throws ApiError
     */
    public static setupApiV1TwoFaSetupGet(): CancelablePromise<SetupApiV1TwoFaSetupGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/two_fa/setup'
        });
    }
    
    /**
     * Verify
     * Verify 2FA token for a user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static verifyApiV1TwoFaVerifyPost(data: VerifyApiV1TwoFaVerifyPostData): CancelablePromise<VerifyApiV1TwoFaVerifyPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/two_fa/verify',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Verify Code
     * Verify 2FA code during login and return full JWT token.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Auth Successful Response
     * @throws ApiError
     */
    public static verifyCodeApiV1TwoFaVerifyCodePost(data: VerifyCodeApiV1TwoFaVerifyCodePostData): CancelablePromise<VerifyCodeApiV1TwoFaVerifyCodePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/two_fa/verify-code',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Disable
     * Disable 2FA for current user.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static disableApiV1TwoFaDisablePost(): CancelablePromise<DisableApiV1TwoFaDisablePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/two_fa/disable'
        });
    }
    
}

export class UsersService {
    /**
     * Signup
     * Sign up a new user and send verification email.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Auth Successful Response
     * @throws ApiError
     */
    public static signupApiV1UserSignupPost(data: SignupApiV1UserSignupPostData): CancelablePromise<SignupApiV1UserSignupPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Resend Verification
     * Resend verification email to unverified user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resendVerificationApiV1UserResendVerificationPost(): CancelablePromise<ResendVerificationApiV1UserResendVerificationPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user/resend-verification'
        });
    }
    
    /**
     * Verify Signup
     * Verify current user's signup with 6-digit verification code.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static verifySignupApiV1UserVerifySignupPost(data: VerifySignupApiV1UserVerifySignupPostData): CancelablePromise<VerifySignupApiV1UserVerifySignupPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user/verify-signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Login
     * Login user with email and password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Auth Successful Response
     * @throws ApiError
     */
    public static loginApiV1UserLoginPost(data: LoginApiV1UserLoginPostData): CancelablePromise<LoginApiV1UserLoginPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Me
     * Get current authenticated user profile (verified or unverified).
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static getMeApiV1UserMeGet(): CancelablePromise<GetMeApiV1UserMeGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/user/me'
        });
    }
    
    /**
     * Update
     * Update current user's data.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateApiV1UserPut(data: UpdateApiV1UserPutData): CancelablePromise<UpdateApiV1UserPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/user/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete
     * Delete current user's account.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteApiV1UserDelete(): CancelablePromise<DeleteApiV1UserDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/user/'
        });
    }
    
    /**
     * Change Password
     * Change current user's password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static changePasswordApiV1UserChangePasswordPost(data: ChangePasswordApiV1UserChangePasswordPostData): CancelablePromise<ChangePasswordApiV1UserChangePasswordPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user/change-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}